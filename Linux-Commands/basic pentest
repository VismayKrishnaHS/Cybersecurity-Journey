## Basic Pentest — Step-by-Step Guide

A concise step-by-step checklist for quick pentest runs (host discovery → scanning → enumeration → credential access → privilege escalation).  
Use this inside a lab environment only.

---

### 1) Host discovery (find live hosts on local network)
Purpose: discover which IPs are online quickly.
```bash
sudo arp-scan -l
```
What to look for: IPs and MACs that respond (e.g. `10.0.2.7`).  
Tip: `arp-scan` is fast and reliable on a local Ethernet/VM network.

Verify reachability:
```bash
ping -c 4 <target-ip>
```
Expected: `0% packet loss` and latency values.

---

### 2) Quick port scan (find open ports)
Purpose: identify open ports & services.
```bash
nmap <target-ip>
```
What to look for: top open ports (ssh, http, smb, tomcat, etc).

Full port sweep (if needed):
```bash
nmap -p- <target-ip>        # scan all 65535 TCP ports
```

Service/version detection and extra enumeration:
```bash
nmap -sV -A --traceroute <target-ip>
```
What to look for: service versions (e.g. `OpenSSH 7.2p2`, `Apache 2.4.18`, `Samba 4.3.11`, `Tomcat 9.0.7`) and scripts output.

---

### 3) Web enumeration (if HTTP/HTTP-proxy/Tomcat found)
Purpose: discover hidden directories, index pages and interesting endpoints.
```bash
gobuster dir -u http://<target-ip>/ -w /usr/share/dirb/wordlists/common.txt
# or
dirb http://<target-ip>/ /usr/share/dirb/wordlists/common.txt
# or
ffuf -u http://<target-ip>/FUZZ -w /path/to/wordlist
```
What to look for: status `200`, `301`, `403` or redirects (`/development`, `/index.html`, `/server-status`, etc).  
Tip: pause long-running scans or add `-t` threads to tune timeouts.

---

### 4) SMB / Windows / Samba enumeration
Purpose: find shares, users, policy info and potential creds.
```bash
enum4linux <target-ip>
# or use smbclient / smbmap for share access
smbclient -L //<target-ip>  # list shares
```
What to look for: exposed shares (Anonymous, IPC$), Samba version, domain/workgroup, user lists, password policy info.

---

### 5) Try credential attacks (brute force / wordlists) — SSH example
Purpose: attempt login with known usernames + wordlist.
**Be careful** — this is noisy and may lock accounts / trip defenses.
```bash
hydra -l <username> -P /usr/share/wordlists/rockyou.txt <target-ip> ssh -t 4
```
What to look for: `login: <user> password: <pass>` output from hydra.  
Tip: lower `-t` if SSH rate-limits or warnings appear.

---

### 6) If you find a private key — convert & crack (if passphrase-protected)
Purpose: extract the key hash for John the Ripper and crack the passphrase.
```bash
ssh2john <keyfile> > keyhash.txt
john --wordlist=/usr/share/wordlists/rockyou.txt keyhash.txt
```
What to look for: john output showing cracked passphrase (replace with placeholder in public notes).  
After cracking: set safe permissions on key:
```bash
chmod 600 <keyfile>
```

---

### 7) Use the key (or credentials) to SSH in
Purpose: get an interactive shell on the host.
```bash
ssh <user>@<target-ip> -i <keyfile>
# or (password login)
ssh <user>@<target-ip>
```
If prompted for key passphrase, provide the cracked passphrase.  
Tip: if you see `UNPROTECTED PRIVATE KEY FILE!` fix permissions with `chmod 600`.

---

### 8) Post-auth local enumeration
Purpose: find sensitive files and escalation vectors.
Common commands:
```bash
# list files and permissions
ls -la
# search for files that might contain creds
grep -Ri "pass" .
grep -Ri "password" .
# search for private keys, scripts, or files with interesting names
find /home -type f -name '*pass*' 2>/dev/null
find / -name '*.pem' -o -name 'id_rsa' 2>/dev/null
```
What to look for: `pass.bak`, `.ssh/authorized_keys`, world-readable files, scripts with credentials.

---

### 9) Check sudo permissions (can this user escalate?)
Purpose: see if the current user can run commands as root.
```bash
sudo -l
```
What to look for: allowed commands or `ALL` grants. If the user can run anything as root, escalate:
```bash
sudo su
```
Note: you may be prompted for the user's password.

---

### 10) Privilege escalation
Purpose: get a root shell using found credentials or sudo rights.
If you have the user password and `sudo` accepts it:
```bash
sudo su
# verify
id
```
What to look for: `uid=0(root)`.

---

### 11) Gather sensitive artifacts (root)
Purpose: collect evidence / hashes for offline analysis.
```bash
# view shadow (hashed passwords)
cat /etc/shadow
# check system info
uname -a
cat /etc/os-release
```
**Important:** Do **not** publish real password hashes or plaintext passwords in public repositories — redact them before sharing.

---

### 12) Documentation & cleanup
- Save commands + outputs to a report (example: `report.md`) — record findings, commands, and remediation notes.  
- Remove any private key copies or tools you uploaded during testing (only in your lab).  
- Note discovered issues and suggested fixes (e.g., disable weak Samba config, apply stricter key permissions, remove plaintext passwords).

---

## Quick pasteable command sequence (summary)
```bash
sudo arp-scan -l
ping -c 4 <target-ip>
nmap -sS -p- -T4 <target-ip>
nmap -sV -A --traceroute <target-ip>
gobuster dir -u http://<target-ip>/ -w /usr/share/dirb/wordlists/common.txt
enum4linux <target-ip>
hydra -l <user> -P /usr/share/wordlists/rockyou.txt <target-ip> ssh -t 4
ssh2john keyfile > keyhash.txt
john --wordlist=/usr/share/wordlists/rockyou.txt keyhash.txt
chmod 600 keyfile
ssh <user>@<target-ip> -i keyfile
ls -la
grep -Ri "pass" .
sudo -l
sudo su
cat /etc/shadow
```

---

## Quick tips & safety
- Always work in a lab or with explicit permission. Unauthorized testing is illegal.  
- Redact or avoid committing passwords and hashes to public repos. Use placeholders like `<cracked-pass>` or `<REDACTED>`.  
- If brute-forcing, be mindful of account lockout thresholds and rate limits (`-t` in hydra).  
- Use `-oN`, `-oA`, etc. in `nmap` to save scan outputs for reporting.

---

_End of Basic Pentest step-by-step._
